{"version":3,"sources":["components/NavBar/NavBar.js","features/MainTable/MainTableAPI.js","features/MainTable/MainTableSlice.js","components/AddCoin/AddCoin.js","components/CoinActions/CoinActions.js","components/PortfolioStatus/PortfolioStatus.js","components/Settings/Settings.js","components/TradingWidgets/TradingWidgets.js","features/MainTable/MainTable.js","App.js","app/store.js","index.js"],"names":["useStyles","makeStyles","theme","appBar","zIndex","drawer","marginBottom","paddingBottom","toolBar","justifyContent","NavBar","classes","AppBar","position","className","Toolbar","style","textAlign","Typography","variant","fetchPrice","coinName","fetch","then","response","json","catch","e","console","log","getCoinsPrice","createAsyncThunk","coins","a","responses","coin","symbol","substring","indexOf","price","toFixed","initialState","userCoins","data","usersCoins","localStorage","getItem","JSON","parse","warn","loadFromLocalStorage","initUsersCoins","calculatedCoinsData","portfolioStatus","status","mainTableSlice","createSlice","name","reducers","addCoin","state","action","payload","newCoin","quantity","startPrice","setItem","stringify","averageCoinCost","values","updArr","map","coinData","sellCoins","delCoin","newCoins","splice","find","caclCoinsData","coinsPrice","coinsData","forEach","index","number","startCost","currentPrice","currentCost","profitDollar","profitPercent","push","caclPortfolioStatus","downloadData","dataStr","encodeURIComponent","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","uploadData","loadDemoData","demoData","demoDataParsed","clearAllData","extraReducers","pending","fulfilled","actions","useCoins","mainTable","useCoinsPrice","useCalculatedCoinsData","usePortfolioStatus","root","margin","spacing","width","display","flexDirection","card","minHeight","cardContent","submitButton","marginTop","form","textField","errorBox","color","fontSize","AddCoin","dispatch","useDispatch","useSelector","checkCoin","Card","CardContent","gutterBottom","initialValues","validate","errors","test","onSubmit","setSubmitting","touched","handleChange","handleBlur","handleSubmit","isSubmitting","autoComplete","Box","TextField","type","onChange","onBlur","label","value","Button","disabled","dropdown","AvarageCoinCost","useState","selectedAction","setSelectedAction","setTimeout","noValidate","height","FormControl","InputLabel","Select","target","MenuItem","portfolioRow","spinnerBox","alignItems","portfolioData","setPortfolioData","useEffect","isLoading","setIsLoading","length","CircularProgress","component","fontWeight","m","button","Settings","event","reader","FileReader","onload","onReaderLoad","readAsText","files","obj","result","toDispatch","getElementById","addEventListener","removeEventListener","id","onClick","accept","hidden","TradingWidgets","borderRadius","overflowX","MainTable","useTheme","isMobile","useMediaQuery","breakpoints","down","gridApi","setGridApi","setGridColumnApi","rowData","setRowData","columnDefsDesktop","headerName","field","columnDefsMobile","columnDefs","setColumnDefs","refreshCells","intervalId","setInterval","clearInterval","Object","keys","sizeColumnsToFit","onGridReady","params","api","columnApi","App","Container","Grid","container","item","xs","lg","store","configureStore","reducer","mainTableReducer","ReactDOM","render","StrictMode"],"mappings":"mRAMMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,OAAQF,EAAME,OAAOC,OAAS,EAC9BC,aAAc,OACdC,cAAe,QAEjBC,QAAS,CACPC,eAAgB,cAIL,SAASC,IACtB,IAAMC,EAAUX,IAEhB,OACE,cAACY,EAAA,EAAD,CAAQC,SAAS,WAAWC,UAAWH,EAAQR,OAA/C,SACE,cAACY,EAAA,EAAD,CAASD,UAAWH,EAAQH,QAA5B,SAEE,sBAAKQ,MAAO,CAAEC,UAAW,UAAzB,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,+BACA,eAACD,EAAA,EAAD,CAAYC,QAAQ,KAApB,mEAEE,uBAFF,sH,6EC1BH,SAASC,EAAWC,GAQzB,OAPiBC,MAAM,sDAAD,OACkCD,EADlC,SAGnBE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BC,OAAM,SAAUC,GACfC,QAAQC,IAAI,QAASF,M,cCS3B,IASaG,EAAgBC,YAC3B,yBAD2C,uCAE3C,WAAOC,GAAP,yBAAAC,EAAA,sDACMC,EAAY,GADlB,cAEqBF,GAFrB,gEAEaG,EAFb,iBAG2Bf,EAAWe,EAAKd,UAH3C,QAGUG,EAHV,QAIaY,OAASZ,EAASY,OAAOC,UAChC,EACAb,EAASY,OAAOE,QAAQ,SAEpBC,GAASf,EAASe,MACxBL,EAAUV,EAASY,QAAUG,EAAMC,QAAQ,GAT/C,wKAWSN,GAXT,gEAF2C,uDAiBvCO,EAAe,CACnBC,UA3BqB,WACrB,IAAMC,EAZR,WACE,IACE,IAAMC,EAAaC,aAAaC,QAAQ,aACxC,GAAmB,OAAfF,EAAqB,OACzB,OAAOG,KAAKC,MAAMJ,GAClB,MAAOjB,GAEP,YADAC,QAAQqB,KAAKtB,IAMFuB,GACb,OAAKP,GACI,GAwBEQ,GACXC,oBAAqB,KACrBC,gBAAiB,KACjBC,OAAQ,QAGGC,EAAiBC,YAAY,CACxCC,KAAM,YACNhB,eACAiB,SAAU,CACRC,QAAS,SAACC,EAAOC,GACf,MAA2CA,EAAOC,QAC5CC,EAAU,CACd1C,SAFF,EAAQA,SAGN2C,UAHF,EAAkBA,SAIhBC,YAJF,EAA4BA,YAM5BL,EAAMlB,UAAN,sBAAsBkB,EAAMlB,WAA5B,CAAuCqB,IACvClB,aAAaqB,QAAQ,YAAanB,KAAKoB,UAAUP,EAAMlB,aAEzD0B,gBAAiB,SAACR,EAAOC,GACvB,MAA0BA,EAAOC,QAAzBO,EAAR,EAAQA,OACFC,EADN,EAAgBtC,MACKuC,KAAI,SAACC,GACxB,GAAIA,EAASnD,WAAagD,EAAOhD,SAAU,CACzC,IAAMc,EAAO,GAOb,OANAA,EAAKd,SAAWgD,EAAOhD,SACvBc,EAAK6B,SAAWQ,EAASR,WAAYK,EAAOL,SAC5C7B,EAAK8B,aACDI,EAAOL,UAAYK,EAAOJ,WAC1BO,EAASR,SAAWQ,EAASP,cAC7BI,EAAOL,SAAWQ,EAASR,UACxB7B,EAET,OAAOqC,KAETZ,EAAMlB,UAAN,YAAsB4B,GACtBzB,aAAaqB,QAAQ,YAAanB,KAAKoB,UAAUP,EAAMlB,aAEzD+B,UAAW,SAACb,EAAOC,GACjB,MAA0BA,EAAOC,QAAzBO,EAAR,EAAQA,OACFC,EADN,EAAgBtC,MACKuC,KAAI,SAACC,GACxB,GAAIA,EAASnD,WAAagD,EAAOhD,SAAU,CACzC,IAAMc,EAAO,GAIb,OAHAA,EAAKd,SAAWgD,EAAOhD,SACvBc,EAAK6B,SAAWQ,EAASR,UAAYK,EAAOL,SAC5C7B,EAAK8B,WAAaO,EAASP,WACpB9B,EAET,OAAOqC,KAETZ,EAAMlB,UAAN,YAAsB4B,GACtBzB,aAAaqB,QAAQ,YAAanB,KAAKoB,UAAUP,EAAMlB,aAEzDgC,QAAS,SAACd,EAAOC,GACf,MAA0BA,EAAOC,QAAzBO,EAAR,EAAQA,OAAQrC,EAAhB,EAAgBA,MACZ2C,EAAQ,YAAO3C,GACnB2C,EAASC,OACPD,EAASrC,QACPqC,EAASE,MAAK,SAACL,GAAD,OAAcA,EAASnD,WAAagD,EAAOhD,YACzD,GAEF,GAGFuC,EAAMlB,UAAN,YAAsBiC,GACtB9B,aAAaqB,QAAQ,YAAanB,KAAKoB,UAAUP,EAAMlB,aAEzDoC,cAAe,SAAClB,EAAOC,GACrB,MAA8BA,EAAOC,QAA7B9B,EAAR,EAAQA,MAAO+C,EAAf,EAAeA,WACf,GAAI/C,GAAS+C,EAAY,CACvB,IAAIC,EAAY,GAChBhD,EAAMiD,SAAQ,SAAC9C,EAAM+C,GACnB,IAAMV,EAAW,CACfW,OAAQD,EACR7D,SAAUc,EAAKd,SACf2C,SAAU7B,EAAK6B,SAASxB,QAAQ,GAChCyB,YAAa9B,EAAK8B,WAAL,KACbmB,WAAYjD,EAAK6B,SAAW7B,EAAK8B,YAAYzB,QAAQ,GAA1C,KACX6C,aAAcN,EAAW5C,EAAKd,UAAhB,KACdiE,aACGnD,EAAK6B,SAAWe,EAAW5C,EAAKd,WAAWmB,QAAQ,GAApD,KACF+C,cAEIpD,EAAK6B,SAAWe,EAAW5C,EAAKd,UAChCc,EAAK6B,SAAW7B,EAAK8B,YACrBzB,QAAQ,GAHV,KAIFgD,gBAEMrD,EAAK6B,SAAWe,EAAW5C,EAAKd,UAChCc,EAAK6B,SAAW7B,EAAK8B,aACpB9B,EAAK6B,SAAW7B,EAAK8B,YACxB,KACAzB,QAAQ,GALV,MAOJwC,EAAUS,KAAKjB,MAEjBZ,EAAMR,oBAAN,UAAgC4B,KAGpCU,oBAAqB,SAAC9B,EAAOC,GAC3B,MAA8BA,EAAOC,QAA7B9B,EAAR,EAAQA,MAAO+C,EAAf,EAAeA,WACf,GAAI/C,GAAS+C,EAAY,CACvB,IAAIC,EAAY,GAChBhD,EAAMiD,SAAQ,SAAC9C,EAAM+C,GACnB,IAAMV,EAAW,CACfW,OAAQD,EACR7D,SAAUc,EAAKd,SACf2C,SAAU7B,EAAK6B,SAASxB,QAAQ,GAChCyB,YAAa9B,EAAK8B,WAClBmB,WAAYjD,EAAK6B,SAAW7B,EAAK8B,YAAYzB,QAAQ,GACrD6C,aAAcN,EAAW5C,EAAKd,UAC9BiE,aAAcnD,EAAK6B,SAAWe,EAAW5C,EAAKd,WAAWmB,QAAQ,GACjE+C,cACEpD,EAAK6B,SAAWe,EAAW5C,EAAKd,UAChCc,EAAK6B,SAAW7B,EAAK8B,YACrBzB,QAAQ,GACVgD,gBACIrD,EAAK6B,SAAWe,EAAW5C,EAAKd,UAChCc,EAAK6B,SAAW7B,EAAK8B,aACpB9B,EAAK6B,SAAW7B,EAAK8B,YACxB,KACAzB,QAAQ,IAEZwC,EAAUS,KAAKjB,MAEjB,IAEInB,EAAkB,CACpB+B,UAAW,EACXE,YAAa,EACbC,aAAc,EACdC,cAAe,GANWR,EAQRC,SAClB,YAA+C,IAA5CG,EAA2C,EAA3CA,UAAWE,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACzBlC,EAAgB+B,WAAa/B,EAAgB+B,YAAaA,EAC1D/B,EAAgBiC,aACbjC,EAAgBiC,cAAeA,EAClCjC,EAAgBkC,cACblC,EAAgBkC,eAAgBA,KAGvClC,EAAe,2BACVA,GADU,IAEbmC,cACEnC,EAAgBkC,aAAelC,EAAgB+B,YAEnDxB,EAAMP,gBAAN,eAA6BA,KAGjCsC,aAAc,WACZ,IAAM/C,EAAaC,aAAaC,QAAQ,aACpC8C,EACF,gCACAC,mBAAmB9C,KAAKoB,UAAUvB,IAChCkD,EAAqBC,SAASC,cAAc,KAChDF,EAAmBG,aAAa,OAAQL,GACxCE,EAAmBG,aAAa,WAAY,aAC5CF,SAASG,KAAKC,YAAYL,GAC1BA,EAAmBM,QACnBN,EAAmBO,UAErBC,WAAY,SAAC1C,EAAOC,GAClBD,EAAMlB,UAAN,YAAsBmB,EAAOC,UAE/ByC,aAAc,SAAC3C,GACbf,aAAaqB,QAAQ,YAAasC,GAClC,IAAMC,EAAiB1D,KAAKC,MAAMwD,GAClC5C,EAAMlB,UAAN,YAAsB+D,IAExBC,aAAc,SAAC9C,GACbf,aAAaqB,QAAQ,YAAa,IAClCN,EAAMlB,UAAY,KAGtBiE,eAAa,mBACV7E,EAAc8E,SAAU,SAAChD,GACxBA,EAAMN,OAAS,aAFN,cAIVxB,EAAc+E,WAAY,SAACjD,EAAOC,GACjCD,EAAMN,OAAS,OACfM,EAAMmB,WAAalB,EAAOC,WANjB,KAWR,EAWHP,EAAeuD,QAVjBnD,EADK,EACLA,QACAmB,EAFK,EAELA,cACAY,EAHK,EAGLA,oBACAtB,EAJK,EAILA,gBACAK,EALK,EAKLA,UACAC,EANK,EAMLA,QACAiB,EAPK,EAOLA,aACAW,EARK,EAQLA,WACAC,EATK,EASLA,aACAG,EAVK,EAULA,aAGWK,EAAW,SAACnD,GACvB,OAAOA,EAAMoD,UAAUtE,WAGZuE,EAAgB,SAACrD,GAC5B,OAAOA,EAAMoD,UAAUjC,YAGZmC,EAAyB,SAACtD,GACrC,OAAOA,EAAMoD,UAAU5D,qBAGZ+D,EAAqB,SAACvD,GACjC,OAAOA,EAAMoD,UAAU3D,iBAGVE,IAAf,Q,qDCpPMvD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCkH,KAAM,CACJ,QAAS,CACPC,OAAQnH,EAAMoH,QAAQ,GACtBC,MAAO,OACPC,QAAS,OACTC,cAAe,WAGnBC,KAAM,CACJC,UAAW,SAEbC,YAAa,CACX3G,UAAW,UAEb4G,aAAc,CACZC,UAAW,QAEbC,KAAM,CACJP,QAAS,OACTC,cAAe,SACfhH,eAAgB,gBAChBkH,UAAW,SAEbK,UAAW,CACTT,MAAO,QAETU,SAAU,CACRC,MAAO,MACPjH,UAAW,OACXkH,SAAU,YAIC,SAASC,KACtB,IAAMC,EAAWC,cACXtG,EAAQuG,YAAYxB,GAEpByB,EAAS,uCAAG,WAAOnH,GAAP,eAAAY,EAAA,sEACOb,EAAWC,GADlB,cACVG,EADU,0BAERA,GAFQ,2CAAH,sDAKTb,EAAUX,IAChB,OACE,cAACyI,EAAA,EAAD,CAAM3H,UAAWH,EAAQ+G,KAAzB,SACE,eAACgB,EAAA,EAAD,CAAa5H,UAAWH,EAAQiH,YAAhC,UACE,cAAC1G,EAAA,EAAD,CAAYC,QAAQ,KAAK+G,MAAM,gBAAgBS,cAAY,EAA3D,0BAGA,cAAC,IAAD,CACEC,cAAe,CAAEvH,SAAU,GAAI2C,SAAU,GAAIC,WAAY,IACzD4E,SAAQ,uCAAE,WAAOxE,GAAP,eAAApC,EAAA,yDACF6G,EAAS,GACVzE,EAAOhD,SAFJ,gBAGNyH,EAAOzH,SAAW,WAHZ,0BAII,aAAa0H,KAAK1E,EAAOhD,UAJ7B,gBAKNyH,EAAOzH,SAAW,8BALZ,2BAONW,EAAM6C,MAAK,SAAC1C,GAAD,OAAUA,EAAKd,WAAagD,EAAOhD,YAPxC,iBASNyH,EAAOzH,SAAW,0BATZ,yCAUSmH,EAAUnE,EAAOhD,UAV1B,oCAWNyH,EAAOzH,SAAP,UAAqBgD,EAAOhD,SAA5B,uCAXM,eAaHgD,EAAOL,SAEA,gBAAgB+E,KAAK1E,EAAOL,YACtC8E,EAAO9E,SAAW,sBAFlB8E,EAAO9E,SAAW,WAIfK,EAAOJ,WAEA,gBAAgB8E,KAAK1E,EAAOJ,cACtC6E,EAAO7E,WAAa,sBAFpB6E,EAAO7E,WAAa,WAnBd,kBAuBD6E,GAvBC,4CAAF,sDAyBRE,SAAU,SAAC3E,EAAD,GAAgC,IAArB4E,EAAoB,EAApBA,cACnBZ,EAAS1E,EAAQU,IACjB4E,GAAc,IA7BlB,SAgCG,gBACC5E,EADD,EACCA,OACAyE,EAFD,EAECA,OACAI,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aACAC,EAPD,EAOCA,aAPD,OASC,uBACEN,SAAUK,EACVvI,UAAWH,EAAQoH,KACnBwB,aAAa,MAHf,UAKE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,KAAK,OACLjG,KAAK,WACLkG,SAAUR,EACVS,OAAQR,EACRS,MAAM,YACNC,MAAOzF,EAAOhD,SACdP,UAAWH,EAAQqH,YAEpBc,EAAOzH,UAAY6H,EAAQ7H,UAC1B,qBAAKP,UAAWH,EAAQsH,SAAxB,SAAmCa,EAAOzH,WAG5C,cAACoI,EAAA,EAAD,CACEC,KAAK,OACLjG,KAAK,WACLkG,SAAUR,EACVS,OAAQR,EACRS,MAAM,WACNC,MAAOzF,EAAOL,SACdlD,UAAWH,EAAQqH,YAEpBc,EAAO9E,UAAYkF,EAAQlF,UAC1B,qBAAKlD,UAAWH,EAAQsH,SAAxB,SAAmCa,EAAO9E,WAG5C,cAACyF,EAAA,EAAD,CACEC,KAAK,OACLjG,KAAK,aACLkG,SAAUR,EACVS,OAAQR,EACRS,MAAM,iBACNC,MAAOzF,EAAOJ,WACdnD,UAAWH,EAAQqH,YAEpBc,EAAO7E,YAAciF,EAAQjF,YAC5B,qBAAKnD,UAAWH,EAAQsH,SAAxB,SAAmCa,EAAO7E,gBAG9C,cAAC8F,EAAA,EAAD,CACEL,KAAK,SACLM,SAAUV,EACVnI,QAAQ,YACR+G,MAAM,UACNpH,UAAWH,EAAQkH,aALrB,+B,qDChIR7H,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCkH,KAAM,CACJ,QAAS,CACPC,OAAQnH,EAAMoH,QAAQ,GACtBC,MAAO,OACPC,QAAS,OACTC,cAAe,WAGnBC,KAAM,CACJC,UAAW,SAEbC,YAAa,CACX3G,UAAW,UAEb4G,aAAc,CACZC,UAAW,QAEbC,KAAM,CACJP,QAAS,OACTC,cAAe,SACfhH,eAAgB,gBAChBkH,UAAW,SAEbsC,SAAU,GAGVhC,SAAU,CACRC,MAAO,MACPjH,UAAW,OACXkH,SAAU,YAIC,SAAS+B,KACtB,IAAM7B,EAAWC,cACX3H,EAAUX,KACVgC,EAAQuG,YAAYxB,GAE1B,EAA4CoD,qBAA5C,oBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAgCF,qBAAhC,oBAAO9I,EAAP,UAUA,OACE,cAACoH,EAAA,EAAD,CAAM3H,UAAWH,EAAQ+G,KAAzB,SACE,eAACgB,EAAA,EAAD,CAAa5H,UAAWH,EAAQiH,YAAhC,UACE,cAAC1G,EAAA,EAAD,CAAYC,QAAQ,KAAK+G,MAAM,gBAAgBS,cAAY,EAA3D,mCAGA,cAAC,IAAD,CACEC,cAAe,CACbwB,eAAgB,GAChB/I,SAAU,GACV2C,SAAU,GACVC,WAAY,IAEd4E,SAAU,SAACxE,GACT,IAAMyE,EAAS,GA2Bf,OA1BKzE,EAAO+F,iBACVtB,EAAOsB,eAAiB,YAErB/F,EAAOhD,WACVyH,EAAOzH,SAAW,YAGC,aAAnB+I,GACoB,cAAnBA,IAAmC/F,EAAOL,SAE3C8E,EAAO9E,SAAW,YAEC,aAAnBoG,GACoB,cAAnBA,IACE,gBAAgBrB,KAAK1E,EAAOL,aAE/B8E,EAAO9E,SAAW,sBAEG,aAAnBoG,GAAkC/F,EAAOJ,WAGxB,aAAnBmG,GACC,gBAAgBrB,KAAK1E,EAAOJ,cAE7B6E,EAAO7E,WAAa,sBALpB6E,EAAO7E,WAAa,WAOf6E,GAETE,SAAU,SAAC3E,EAAD,GAAgC,IAArB4E,EAAoB,EAApBA,cAInB,OAHAqB,YAAW,WACTrB,GAAc,KACb,KACK5E,EAAO+F,gBACb,IAAK,WACH/B,EAASjE,EAAgB,CAAEC,SAAQrC,WACnC,MACF,IAAK,YACHqG,EAAS5D,EAAU,CAAEJ,SAAQrC,WAC7B,MACF,IAAK,cACHqG,EAAS3D,EAAQ,CAAEL,SAAQrC,WAC3B,MACF,QACEJ,QAAQC,IAAR,+BAAoCwC,EAAO+F,eAA3C,QApDR,SAwDG,gBACC/F,EADD,EACCA,OACAyE,EAFD,EAECA,OACAI,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aACAC,EAPD,EAOCA,aAPD,OASC,uBACEN,SAAUK,EACVvI,UAAWH,EAAQoH,KACnBwC,YAAU,EACVhB,aAAa,MAJf,UAME,eAACC,EAAA,EAAD,CACExI,MAAO,CACLwG,QAAS,OACTC,cAAe,SACf+C,OAAQ,SAJZ,UAOE,eAACC,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,6BAEA,eAACC,GAAA,EAAD,CACEhB,SAAU,SAAChI,GACTwH,EAAaxH,GAhG/B0I,EAiGqC1I,EAjGbiJ,OAAOd,QAmGfhJ,UAAWH,EAAQsJ,SACnBH,MAAOM,EACP3G,KAAK,iBAPP,UASE,cAACoH,GAAA,EAAD,CAAUf,MAAM,WAAhB,SACE,kDAEF,cAACe,GAAA,EAAD,CAAUf,MAAM,YAAhB,SACE,8CAEF,cAACe,GAAA,EAAD,CAAUf,MAAM,cAAhB,SACE,gDAILhB,EAAOsB,gBAAkBlB,EAAQkB,gBAChC,qBAAKtJ,UAAWH,EAAQsH,SAAxB,SACGa,EAAOsB,iBAGZ,eAACK,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,gCACA,cAACC,GAAA,EAAD,CACEhB,SAAUR,EACVrI,UAAWH,EAAQsJ,SACnBH,MAAOzI,EACPoC,KAAK,WAJP,SAMGzB,EAAMuC,KAAI,SAACpC,GACV,OACE,cAAC0I,GAAA,EAAD,CAAUf,MAAO3H,EAAKd,SAAtB,SACE,6BAAKc,EAAKd,qBAMnByH,EAAOzH,UAAY6H,EAAQ7H,UAC1B,qBAAKP,UAAWH,EAAQsH,SAAxB,SAAmCa,EAAOzH,WAGxB,aAAnB+I,GACkB,cAAnBA,EACE,qCACE,cAACX,EAAA,EAAD,CACEC,KAAK,OACLjG,KAAK,WACLkG,SAAUR,EACVS,OAAQR,EACRS,MAAM,WACNC,MAAOzF,EAAOL,WAEf8E,EAAO9E,UAAYkF,EAAQlF,UAC1B,qBAAKlD,UAAWH,EAAQsH,SAAxB,SAAmCa,EAAO9E,cAG5C,KACgB,aAAnBoG,EACC,qCACE,cAACX,EAAA,EAAD,CACEC,KAAK,OACLjG,KAAK,aACLkG,SAAUR,EACVS,OAAQR,EACRS,MAAM,iBACNC,MAAOzF,EAAOJ,aAEf6E,EAAO7E,YAAciF,EAAQjF,YAC5B,qBAAKnD,UAAWH,EAAQsH,SAAxB,SACGa,EAAO7E,gBAIZ,QAEN,cAAC8F,EAAA,EAAD,CACEL,KAAK,SACLM,SAAUV,EACVnI,QAAQ,YACR+G,MAAM,UACNpH,UAAWH,EAAQkH,aALrB,+B,cC9NR7H,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCkH,KAAM,CACJ,QAAS,CACPC,OAAQnH,EAAMoH,QAAQ,GACtBC,MAAO,OACPC,QAAS,OACTC,cAAe,WAGnBC,KAAM,CACJC,UAAW,SAEbC,YAAa,CACX3G,UAAW,SACXuJ,OAAQ,QAEVM,aAAc,CACZtD,QAAS,OACT/G,eAAgB,gBAChBH,aAAc,QAEhByK,WAAY,CACVP,OAAQ,QACRhD,QAAS,OACT/G,eAAgB,SAChBuK,WAAY,cAID,SAASd,KACtB,IAAMvJ,EAAUX,KACVqI,EAAWC,cACXtG,EAAQuG,YAAYxB,GACpBhC,EAAawD,YAAYtB,GACzB7D,EAAsBmF,YAAYrB,GAClC7D,EAAkBkF,YAAYpB,GACpC,EAA0CgD,mBAAS,MAAnD,oBAAOc,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,WACR9C,EAAS3C,EAAoB,CAAE1D,QAAO+C,kBACrC,CAAC3B,IAEJ+H,qBAAU,WACJ9H,GACF6H,EAAiB7H,KAElB,CAACA,IAEJ,MAAkC8G,oBAAS,GAA3C,oBAAOiB,EAAP,KAAkBC,EAAlB,KAQA,OANAF,qBAAU,WACJ9H,GAAmBA,EAAgB+B,UAAY,GACjDiG,GAAa,KAEd,CAAChI,IAGF,cAACoF,EAAA,EAAD,CAAM3H,UAAWH,EAAQ+G,KAAzB,SACE,eAACgB,EAAA,EAAD,CAAa5H,UAAWH,EAAQiH,YAAhC,UACE,cAAC4B,EAAA,EAAD,UACE,cAACtI,EAAA,EAAD,CAAYC,QAAQ,KAAK+G,MAAM,gBAAgBS,cAAY,EAA3D,gCAIF,cAACa,EAAA,EAAD,CACE1I,WACGmK,IAAkBjJ,EAAMsJ,OAAS,EAAI3K,EAAQoK,WAAa,KAF/D,SAKG/I,EAAMsJ,OAAS,EACdF,EAAY,EACV,cAACG,GAAA,EAAD,IAEA,eAACrK,EAAA,EAAD,CAAYsK,UAAU,MAAtB,UACE,eAAChC,EAAA,EAAD,CAAK1I,UAAWH,EAAQmK,aAAxB,UACE,cAAC5J,EAAA,EAAD,CAAYC,QAAQ,QAAQ+G,MAAM,gBAAlC,iCAGA,eAAChH,EAAA,EAAD,CACEC,QAAQ,QACR+G,MAAM,gBACNuD,WAAW,iBAHb,UAKGR,EAAc7F,UAAU5C,QAAQ,GALnC,UAQF,eAACgH,EAAA,EAAD,CAAK1I,UAAWH,EAAQmK,aAAxB,UACE,cAAC5J,EAAA,EAAD,CAAYC,QAAQ,QAAQ+G,MAAM,gBAAlC,mCAGA,eAAChH,EAAA,EAAD,CACEC,QAAQ,QACR+G,MAAM,gBACNuD,WAAW,iBAHb,UAKGR,EAAc3F,YAAY9C,QAAQ,GALrC,UAQF,eAACgH,EAAA,EAAD,CAAK1I,UAAWH,EAAQmK,aAAxB,UACE,cAAC5J,EAAA,EAAD,CAAYC,QAAQ,QAAQ+G,MAAM,gBAAlC,6BAGA,eAAChH,EAAA,EAAD,CACEC,QAAQ,QACR+G,MAAM,gBACNuD,WAAW,iBAHb,UAKGR,EAAc1F,aAAa/C,QAAQ,GALtC,UAQF,eAACgH,EAAA,EAAD,CAAK1I,UAAWH,EAAQmK,aAAxB,UACE,cAAC5J,EAAA,EAAD,CAAYC,QAAQ,QAAQ+G,MAAM,gBAAlC,6BAGA,eAAChH,EAAA,EAAD,CACEC,QAAQ,QACR+G,MAAM,gBACNuD,WAAY,IACZC,EAAG,EAJL,WAMkC,IAA9BT,EAAczF,eAAqBhD,QAAQ,GAN/C,aAYN,yFChIZ,IAAMxC,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCkH,KAAM,CACJ,QAAS,CACPC,OAAQnH,EAAMoH,QAAQ,GACtBC,MAAO,OACPC,QAAS,OACTC,cAAe,WAGnBC,KAAM,CACJC,UAAW,SAEbC,YAAa,CACXJ,QAAS,OACTC,cAAe,SACfE,UAAW,QACXlH,eAAgB,gBAChBQ,UAAW,UAEb0K,OAAQ,CACNnE,QAAS,QACTD,MAAO,YAII,SAASqE,KACtB,IAAMvD,EAAWC,cACX3H,EAAUX,KAoBhB,OAlBAmL,qBAAU,WACR,SAASxB,EAASkC,GAChB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAASC,EAChBH,EAAOI,WAAWL,EAAMjB,OAAOuB,MAAM,IAEvC,SAASF,EAAaJ,GACpB,IAAMO,EAAMrJ,KAAKC,MAAM6I,EAAMjB,OAAOyB,QAC9BC,EAAavJ,KAAKC,MAAMoJ,GAC9B/D,EAAS/B,EAAWgG,IACpBzJ,aAAaqB,QAAQ,YAAakI,GAGpC,OADArG,SAASwG,eAAe,QAAQC,iBAAiB,SAAU7C,GACpD,WACL5D,SAASwG,eAAe,QAAQE,oBAAoB,SAAU9C,OAKhE,cAAClB,EAAA,EAAD,CAAM3H,UAAWH,EAAQ+G,KAAzB,SACE,eAACgB,EAAA,EAAD,CAAa5H,UAAWH,EAAQiH,YAAhC,UACE,cAAC1G,EAAA,EAAD,CAAYC,QAAQ,KAAK+G,MAAM,gBAA/B,2BAGA,cAAC6B,EAAA,EAAD,CACE2C,GAAG,qBACHC,QAAS,WACPtE,EAAS1C,MAEXxE,QAAQ,YACR+G,MAAM,UACNpH,UAAWH,EAAQgL,OAPrB,gCAYA,eAAC5B,EAAA,EAAD,CACEyB,UAAU,QACVrK,QAAQ,YACR+G,MAAM,UACNpH,UAAWH,EAAQgL,OAJrB,6BAOE,uBAAOjC,KAAK,OAAOgD,GAAG,OAAOE,OAAO,QAAQC,QAAM,OAEpD,cAAC9C,EAAA,EAAD,CACE4C,QAAS,WACPtE,EAAS9B,MAEXpF,QAAQ,YACR+G,MAAM,YACNpH,UAAWH,EAAQgL,OANrB,4BAUA,cAAC5B,EAAA,EAAD,CACE2C,GAAG,eACHC,QAAS,WACPtE,EAAS3B,MAEXvF,QAAQ,YACR+G,MAAM,YACNpH,UAAWH,EAAQgL,OAPrB,iC,wBC3FO,SAASmB,KAetB,OAdcvE,YAAYxB,GAEJxC,KAAI,SAACpC,GACzB,OACE,cAACsG,EAAA,EAAD,CAAMzH,MAAO,CAAEV,aAAc,QAA7B,SACE,cAACoI,EAAA,EAAD,UACE,cAAC,KAAD,CACEtG,OAAM,kBAAaD,EAAKd,SAAlB,QACNkG,MAAO,gB,gDCEbvH,GAAYC,aAAW,iBAAO,CAClCmH,KAAM,CACJ,QAAS,CACP2F,aAAc,OAEhB,0BAA2B,CACzBvC,OAAQ,QAEV,0BAA2B,CACzB/J,eAAgB,UAElB,6BAA8B,CAC5BuM,UAAW,0BAKF,SAASC,KACtB,IAAM5E,EAAWC,cACX3H,EAAUX,KACVE,EAAQgN,eACRC,EAAWC,aAAclN,EAAMmN,YAAYC,KAAK,OAChDtL,EAAQuG,YAAYxB,GACpBhC,EAAawD,YAAYtB,GACzB7D,EAAsBmF,YAAYrB,GAExC,EAA8BiD,mBAAS,MAAvC,oBAAOoD,EAAP,KAAgBC,EAAhB,KACA,EAA0CrD,mBAAS,MAAnD,oBAAsBsD,GAAtB,WACA,EAA8BtD,mBAAS,IAAvC,oBAAOuD,EAAP,KAAgBC,EAAhB,KAEMC,EAAoB,CACxB,CACEC,WAAY,SACZC,MAAO,SACPvG,MAAO,IAET,CACEsG,WAAY,YACZC,MAAO,YAET,CACED,WAAY,WACZC,MAAO,YAET,CACED,WAAY,aACZC,MAAO,aAET,CACED,WAAY,sBACZC,MAAO,cAET,CACED,WAAY,gBACZC,MAAO,gBAET,CACED,WAAY,eACZC,MAAO,eAET,CACED,WAAY,WACZC,MAAO,gBAET,CACED,WAAY,WACZC,MAAO,kBAGLC,EAAmB,CACvB,CACEF,WAAY,YACZC,MAAO,YAET,CACED,WAAY,eACZC,MAAO,eAET,CACED,WAAY,WACZC,MAAO,gBAET,CACED,WAAY,WACZC,MAAO,kBAGX,EAAoC3D,mBAAS4D,GAA7C,oBAAOC,EAAP,KAAmBC,EAAnB,KACA9C,qBAAU,WAEN8C,EADEd,EACYY,EAEAH,KAEf,CAACT,IAEJhC,qBAAU,WACJoC,GACFA,EAAQW,iBAET,CAACF,IAEJ,MAAkC7D,oBAAS,GAA3C,oBAAOiB,EAAP,KAAkBC,EAAlB,KAEAF,qBAAU,WACR,IAAMgD,EAAaC,aAAY,WAC7B/F,EAASvG,EAAcE,MACtB,MAEH,OAAO,WACLqM,cAAcF,MAEf,CAACnM,IAEJmJ,qBAAU,WACRE,GAAa,GACTrJ,GAAS+C,GACP/C,EAAMsJ,SAAWgD,OAAOC,KAAKxJ,GAAYuG,SAC3CjD,EAASvD,EAAc,CAAE9C,QAAO+C,gBAChCsG,GAAa,MAGhB,CAACrJ,EAAO+C,IAEXoG,qBAAU,WACJ/H,GACFuK,EAAWvK,KAEZ,CAACA,IAmBJ,OAZA+H,qBAAU,WACJoC,GACFA,EAAQiB,sBAIZrD,qBAAU,WACJuC,GAAWA,EAAQpC,OAAS,GAC9BD,GAAa,KAEd,CAACqC,IAGF,cAACjF,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAa1H,MAAO,CAAEC,UAAW,UAAjC,SACGe,EAAMsJ,OAAS,EACdF,EACE,cAACG,GAAA,EAAD,CAAkBvK,MAAO,CAAEqG,OAAQ,YAEnC,qBAAKvG,UAAU,kBAAkBE,MAAO,CAAEuG,MAAO,QAAjD,SACE,cAAC,eAAD,CACEmG,QAASA,EACTM,WAAYA,EACZS,YA5BM,SAACC,GACnBlB,EAAWkB,EAAOC,KAClBlB,EAAiBiB,EAAOE,YA2BZ9N,UAAWH,EAAQyG,SAKzB,sFC7IKyH,OA9Bf,WACE,OACE,sBAAK/N,UAAU,MAAf,UACE,cAACJ,EAAD,IACA,cAACoO,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAC1H,QAAS,EAAzB,UACE,cAACyH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,GAAD,MAEF,cAACJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC/G,GAAD,MAEF,cAAC2G,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,GAAD,MAEF,cAACJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAACvD,GAAD,MAEF,cAACmD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACjC,GAAD,MAEF,cAAC8B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACpC,GAAD,eC9BCsC,GAAQC,YAAe,CAClCC,QAAS,CACPtI,UAAWuI,KCEfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJrJ,SAASwG,eAAe,U","file":"static/js/main.c5e990cb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Toolbar } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    marginBottom: \"20px\",\r\n    paddingBottom: \"10px\",\r\n  },\r\n  toolBar: {\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nexport default function NavBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"relative\" className={classes.appBar}>\r\n      <Toolbar className={classes.toolBar}>\r\n        {/* <MenuIcon /> */}\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Typography variant=\"h3\"> Crypto Portfolio</Typography>\r\n          <Typography variant=\"h6\">\r\n            Keep track of your coins. Add coins, average the cost.\r\n            <br /> Works for the currency pair \"the name of your coin\" / BUSD.\r\n            Prices are pulled from the Binance exchange.\r\n          </Typography>\r\n        </div>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","export function fetchPrice(coinName) {\n  const response = fetch(\n    `https://www.binance.com/api/v3/ticker/price?symbol=${coinName}BUSD`\n  )\n    .then((response) => response.json())\n    .catch(function (e) {\n      console.log(\"error\", e);\n    });\n  return response;\n}\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchPrice } from \"./MainTableAPI\";\nimport demoData from \"../../demoData.json\";\n\nfunction loadFromLocalStorage() {\n  try {\n    const usersCoins = localStorage.getItem(\"userCoins\");\n    if (usersCoins === null) return undefined;\n    return JSON.parse(usersCoins);\n  } catch (e) {\n    console.warn(e);\n    return undefined;\n  }\n}\n\nconst initUsersCoins = () => {\n  const data = loadFromLocalStorage();\n  if (!data) {\n    return [];\n  } else {\n    return data;\n  }\n};\n\nexport const getCoinsPrice = createAsyncThunk(\n  \"mainTable/getCoinPrice\",\n  async (coins) => {\n    let responses = {};\n    for (const coin of coins) {\n      const response = await fetchPrice(coin.coinName);\n      response.symbol = response.symbol.substring(\n        0,\n        response.symbol.indexOf(\"BUSD\")\n      );\n      const price = +response.price;\n      responses[response.symbol] = price.toFixed(2);\n    }\n    return responses;\n  }\n);\n\nconst initialState = {\n  userCoins: initUsersCoins(),\n  calculatedCoinsData: null,\n  portfolioStatus: null,\n  status: \"idle\",\n};\n\nexport const mainTableSlice = createSlice({\n  name: \"mainTable\",\n  initialState,\n  reducers: {\n    addCoin: (state, action) => {\n      const { coinName, quantity, startPrice } = action.payload;\n      const newCoin = {\n        coinName: coinName,\n        quantity: +quantity,\n        startPrice: +startPrice,\n      };\n      state.userCoins = [...state.userCoins, newCoin];\n      localStorage.setItem(\"userCoins\", JSON.stringify(state.userCoins));\n    },\n    averageCoinCost: (state, action) => {\n      const { values, coins } = action.payload;\n      const updArr = coins.map((coinData) => {\n        if (coinData.coinName === values.coinName) {\n          const coin = {};\n          coin.coinName = values.coinName;\n          coin.quantity = coinData.quantity + +values.quantity;\n          coin.startPrice =\n            (+values.quantity * +values.startPrice +\n              coinData.quantity * coinData.startPrice) /\n            (+values.quantity + coinData.quantity);\n          return coin;\n        }\n        return coinData;\n      });\n      state.userCoins = [...updArr];\n      localStorage.setItem(\"userCoins\", JSON.stringify(state.userCoins));\n    },\n    sellCoins: (state, action) => {\n      const { values, coins } = action.payload;\n      const updArr = coins.map((coinData) => {\n        if (coinData.coinName === values.coinName) {\n          const coin = {};\n          coin.coinName = values.coinName;\n          coin.quantity = coinData.quantity - +values.quantity;\n          coin.startPrice = coinData.startPrice;\n          return coin;\n        }\n        return coinData;\n      });\n      state.userCoins = [...updArr];\n      localStorage.setItem(\"userCoins\", JSON.stringify(state.userCoins));\n    },\n    delCoin: (state, action) => {\n      const { values, coins } = action.payload;\n      let newCoins = [...coins];\n      newCoins.splice(\n        newCoins.indexOf(\n          newCoins.find((coinData) => coinData.coinName === values.coinName),\n          0\n        ),\n        1\n      );\n\n      state.userCoins = [...newCoins];\n      localStorage.setItem(\"userCoins\", JSON.stringify(state.userCoins));\n    },\n    caclCoinsData: (state, action) => {\n      const { coins, coinsPrice } = action.payload;\n      if (coins && coinsPrice) {\n        let coinsData = [];\n        coins.forEach((coin, index) => {\n          const coinData = {\n            number: index,\n            coinName: coin.coinName,\n            quantity: coin.quantity.toFixed(4),\n            startPrice: +coin.startPrice + ` $`,\n            startCost: (coin.quantity * coin.startPrice).toFixed(2) + ` $`,\n            currentPrice: coinsPrice[coin.coinName] + ` $`,\n            currentCost:\n              (coin.quantity * coinsPrice[coin.coinName]).toFixed(2) + ` $`,\n            profitDollar:\n              (\n                coin.quantity * coinsPrice[coin.coinName] -\n                coin.quantity * coin.startPrice\n              ).toFixed(2) + ` $`,\n            profitPercent:\n              (\n                ((coin.quantity * coinsPrice[coin.coinName] -\n                  coin.quantity * coin.startPrice) /\n                  (coin.quantity * coin.startPrice)) *\n                100\n              ).toFixed(0) + ` %`,\n          };\n          coinsData.push(coinData);\n        });\n        state.calculatedCoinsData = [...coinsData];\n      }\n    },\n    caclPortfolioStatus: (state, action) => {\n      const { coins, coinsPrice } = action.payload;\n      if (coins && coinsPrice) {\n        let coinsData = [];\n        coins.forEach((coin, index) => {\n          const coinData = {\n            number: index,\n            coinName: coin.coinName,\n            quantity: coin.quantity.toFixed(4),\n            startPrice: +coin.startPrice,\n            startCost: (coin.quantity * coin.startPrice).toFixed(2),\n            currentPrice: coinsPrice[coin.coinName],\n            currentCost: (coin.quantity * coinsPrice[coin.coinName]).toFixed(2),\n            profitDollar: (\n              coin.quantity * coinsPrice[coin.coinName] -\n              coin.quantity * coin.startPrice\n            ).toFixed(2),\n            profitPercent: (\n              ((coin.quantity * coinsPrice[coin.coinName] -\n                coin.quantity * coin.startPrice) /\n                (coin.quantity * coin.startPrice)) *\n              100\n            ).toFixed(0),\n          };\n          coinsData.push(coinData);\n        });\n        const calculatedCoinsData = coinsData;\n\n        let portfolioStatus = {\n          startCost: 0,\n          currentCost: 0,\n          profitDollar: 0,\n          profitPercent: 0,\n        };\n        calculatedCoinsData.forEach(\n          ({ startCost, currentCost, profitDollar }) => {\n            portfolioStatus.startCost = +portfolioStatus.startCost + +startCost;\n            portfolioStatus.currentCost =\n              +portfolioStatus.currentCost + +currentCost;\n            portfolioStatus.profitDollar =\n              +portfolioStatus.profitDollar + +profitDollar;\n          }\n        );\n        portfolioStatus = {\n          ...portfolioStatus,\n          profitPercent:\n            portfolioStatus.profitDollar / portfolioStatus.startCost,\n        };\n        state.portfolioStatus = { ...portfolioStatus };\n      }\n    },\n    downloadData: () => {\n      const usersCoins = localStorage.getItem(\"userCoins\");\n      let dataStr =\n        \"data:text/json;charset=utf-8,\" +\n        encodeURIComponent(JSON.stringify(usersCoins));\n      let downloadAnchorNode = document.createElement(\"a\");\n      downloadAnchorNode.setAttribute(\"href\", dataStr);\n      downloadAnchorNode.setAttribute(\"download\", \"test.json\");\n      document.body.appendChild(downloadAnchorNode); // required for firefox\n      downloadAnchorNode.click();\n      downloadAnchorNode.remove();\n    },\n    uploadData: (state, action) => {\n      state.userCoins = [...action.payload];\n    },\n    loadDemoData: (state) => {\n      localStorage.setItem(\"userCoins\", demoData);\n      const demoDataParsed = JSON.parse(demoData);\n      state.userCoins = [...demoDataParsed];\n    },\n    clearAllData: (state) => {\n      localStorage.setItem(\"userCoins\", []);\n      state.userCoins = [];\n    },\n  },\n  extraReducers: {\n    [getCoinsPrice.pending]: (state) => {\n      state.status = \"loading\";\n    },\n    [getCoinsPrice.fulfilled]: (state, action) => {\n      state.status = \"idle\";\n      state.coinsPrice = action.payload;\n    },\n  },\n});\n\nexport const {\n  addCoin,\n  caclCoinsData,\n  caclPortfolioStatus,\n  averageCoinCost,\n  sellCoins,\n  delCoin,\n  downloadData,\n  uploadData,\n  loadDemoData,\n  clearAllData,\n} = mainTableSlice.actions;\n\nexport const useCoins = (state) => {\n  return state.mainTable.userCoins;\n};\n\nexport const useCoinsPrice = (state) => {\n  return state.mainTable.coinsPrice;\n};\n\nexport const useCalculatedCoinsData = (state) => {\n  return state.mainTable.calculatedCoinsData;\n};\n\nexport const usePortfolioStatus = (state) => {\n  return state.mainTable.portfolioStatus;\n};\n\nexport default mainTableSlice.reducer;\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addCoin, useCoins } from \"../../features/MainTable/MainTableSlice\";\r\nimport { fetchPrice } from \"../../features/MainTable/MainTableAPI\";\r\nimport { Formik } from \"formik\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n    },\r\n  },\r\n  card: {\r\n    minHeight: \"327px\",\r\n  },\r\n  cardContent: {\r\n    textAlign: \"center\",\r\n  },\r\n  submitButton: {\r\n    marginTop: \"20px\",\r\n  },\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n    minHeight: \"247px\",\r\n  },\r\n  textField: {\r\n    width: \"100%\",\r\n  },\r\n  errorBox: {\r\n    color: \"red\",\r\n    textAlign: \"left\",\r\n    fontSize: \"12px\",\r\n  },\r\n}));\r\n\r\nexport default function AddCoin() {\r\n  const dispatch = useDispatch();\r\n  const coins = useSelector(useCoins);\r\n\r\n  const checkCoin = async (coinName) => {\r\n    const response = await fetchPrice(coinName);\r\n    return !response;\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardContent className={classes.cardContent}>\r\n        <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\r\n          Add New Coin\r\n        </Typography>\r\n        <Formik\r\n          initialValues={{ coinName: \"\", quantity: \"\", startPrice: \"\" }}\r\n          validate={async (values) => {\r\n            const errors = {};\r\n            if (!values.coinName) {\r\n              errors.coinName = \"Required\";\r\n            } else if (!/(^[A-Z]+$)/.test(values.coinName)) {\r\n              errors.coinName = \"Allows only capital letters\";\r\n            } else if (\r\n              coins.find((coin) => coin.coinName === values.coinName)\r\n            ) {\r\n              errors.coinName = \"This coin already exist\";\r\n            } else if (await checkCoin(values.coinName)) {\r\n              errors.coinName = `${values.coinName}/BUSD doesn't exists on the Binance`;\r\n            }\r\n            if (!values.quantity) {\r\n              errors.quantity = \"Required\";\r\n            } else if (!/(^[0-9\\.]+$)/g.test(values.quantity)) {\r\n              errors.quantity = \"Allows only digits\";\r\n            }\r\n            if (!values.startPrice) {\r\n              errors.startPrice = \"Required\";\r\n            } else if (!/(^[0-9\\.]+$)/g.test(values.startPrice)) {\r\n              errors.startPrice = \"Allows only digits\";\r\n            }\r\n            return errors;\r\n          }}\r\n          onSubmit={(values, { setSubmitting }) => {\r\n            dispatch(addCoin(values));\r\n            setSubmitting(false);\r\n          }}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            isSubmitting,\r\n          }) => (\r\n            <form\r\n              onSubmit={handleSubmit}\r\n              className={classes.form}\r\n              autoComplete=\"off\"\r\n            >\r\n              <Box>\r\n                <TextField\r\n                  type=\"text\"\r\n                  name=\"coinName\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  label=\"Coin name\"\r\n                  value={values.coinName}\r\n                  className={classes.textField}\r\n                />\r\n                {errors.coinName && touched.coinName && (\r\n                  <div className={classes.errorBox}>{errors.coinName}</div>\r\n                )}\r\n\r\n                <TextField\r\n                  type=\"text\"\r\n                  name=\"quantity\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  label=\"Quantity\"\r\n                  value={values.quantity}\r\n                  className={classes.textField}\r\n                />\r\n                {errors.quantity && touched.quantity && (\r\n                  <div className={classes.errorBox}>{errors.quantity}</div>\r\n                )}\r\n\r\n                <TextField\r\n                  type=\"text\"\r\n                  name=\"startPrice\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  label=\"Purchase price\"\r\n                  value={values.startPrice}\r\n                  className={classes.textField}\r\n                />\r\n                {errors.startPrice && touched.startPrice && (\r\n                  <div className={classes.errorBox}>{errors.startPrice}</div>\r\n                )}\r\n              </Box>\r\n              <Button\r\n                type=\"submit\"\r\n                disabled={isSubmitting}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submitButton}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  useCoins,\r\n  averageCoinCost,\r\n  sellCoins,\r\n  delCoin,\r\n} from \"../../features/MainTable/MainTableSlice\";\r\nimport { Formik } from \"formik\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n    },\r\n  },\r\n  card: {\r\n    minHeight: \"327px\",\r\n  },\r\n  cardContent: {\r\n    textAlign: \"center\",\r\n  },\r\n  submitButton: {\r\n    marginTop: \"20px\",\r\n  },\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n    minHeight: \"246px\",\r\n  },\r\n  dropdown: {\r\n    // marginTop: \"16px\",\r\n  },\r\n  errorBox: {\r\n    color: \"red\",\r\n    textAlign: \"left\",\r\n    fontSize: \"12px\",\r\n  },\r\n}));\r\n\r\nexport default function AvarageCoinCost() {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const coins = useSelector(useCoins);\r\n\r\n  const [selectedAction, setSelectedAction] = useState();\r\n  const [coinName, setCoinName] = useState();\r\n\r\n  const handleChangeAction = (event) => {\r\n    setSelectedAction(event.target.value);\r\n  };\r\n\r\n  const handleChangeCoin = (event) => {\r\n    setCoinName(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardContent className={classes.cardContent}>\r\n        <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\r\n          Buy/Sell/Delete coins\r\n        </Typography>\r\n        <Formik\r\n          initialValues={{\r\n            selectedAction: \"\",\r\n            coinName: \"\",\r\n            quantity: \"\",\r\n            startPrice: \"\",\r\n          }}\r\n          validate={(values) => {\r\n            const errors = {};\r\n            if (!values.selectedAction) {\r\n              errors.selectedAction = \"Required\";\r\n            }\r\n            if (!values.coinName) {\r\n              errors.coinName = \"Required\";\r\n            }\r\n            if (\r\n              selectedAction === \"buyCoins\" ||\r\n              (selectedAction === \"sellCoins\" && !values.quantity)\r\n            ) {\r\n              errors.quantity = \"Required\";\r\n            } else if (\r\n              selectedAction === \"buyCoins\" ||\r\n              (selectedAction === \"sellCoins\" &&\r\n                !/(^[0-9\\.]+$)/g.test(values.quantity))\r\n            ) {\r\n              errors.quantity = \"Allows only digits\";\r\n            }\r\n            if (selectedAction === \"buyCoins\" && !values.startPrice) {\r\n              errors.startPrice = \"Required\";\r\n            } else if (\r\n              selectedAction === \"buyCoins\" &&\r\n              !/(^[0-9\\.]+$)/g.test(values.startPrice)\r\n            ) {\r\n              errors.startPrice = \"Allows only digits\";\r\n            }\r\n            return errors;\r\n          }}\r\n          onSubmit={(values, { setSubmitting }) => {\r\n            setTimeout(() => {\r\n              setSubmitting(false);\r\n            }, 400);\r\n            switch (values.selectedAction) {\r\n              case \"buyCoins\":\r\n                dispatch(averageCoinCost({ values, coins }));\r\n                break;\r\n              case \"sellCoins\":\r\n                dispatch(sellCoins({ values, coins }));\r\n                break;\r\n              case \"deleteCoins\":\r\n                dispatch(delCoin({ values, coins }));\r\n                break;\r\n              default:\r\n                console.log(`Sorry, we are out of ${values.selectedAction}.`);\r\n            }\r\n          }}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            isSubmitting,\r\n          }) => (\r\n            <form\r\n              onSubmit={handleSubmit}\r\n              className={classes.form}\r\n              noValidate\r\n              autoComplete=\"off\"\r\n            >\r\n              <Box\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  height: \"192px\",\r\n                }}\r\n              >\r\n                <FormControl>\r\n                  <InputLabel>Select action:</InputLabel>\r\n\r\n                  <Select\r\n                    onChange={(e) => {\r\n                      handleChange(e);\r\n                      handleChangeAction(e);\r\n                    }}\r\n                    className={classes.dropdown}\r\n                    value={selectedAction}\r\n                    name=\"selectedAction\"\r\n                  >\r\n                    <MenuItem value=\"buyCoins\">\r\n                      <em>Buy more coins</em>\r\n                    </MenuItem>\r\n                    <MenuItem value=\"sellCoins\">\r\n                      <em>Sell coins</em>\r\n                    </MenuItem>\r\n                    <MenuItem value=\"deleteCoins\">\r\n                      <em>Delete</em>\r\n                    </MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n                {errors.selectedAction && touched.selectedAction && (\r\n                  <div className={classes.errorBox}>\r\n                    {errors.selectedAction}\r\n                  </div>\r\n                )}\r\n                <FormControl>\r\n                  <InputLabel>Choose your coin:</InputLabel>\r\n                  <Select\r\n                    onChange={handleChange}\r\n                    className={classes.dropdown}\r\n                    value={coinName}\r\n                    name=\"coinName\"\r\n                  >\r\n                    {coins.map((coin) => {\r\n                      return (\r\n                        <MenuItem value={coin.coinName}>\r\n                          <em>{coin.coinName}</em>\r\n                        </MenuItem>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n                {errors.coinName && touched.coinName && (\r\n                  <div className={classes.errorBox}>{errors.coinName}</div>\r\n                )}\r\n\r\n                {selectedAction === \"buyCoins\" ||\r\n                selectedAction === \"sellCoins\" ? (\r\n                  <>\r\n                    <TextField\r\n                      type=\"text\"\r\n                      name=\"quantity\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      label=\"Quantity\"\r\n                      value={values.quantity}\r\n                    />\r\n                    {errors.quantity && touched.quantity && (\r\n                      <div className={classes.errorBox}>{errors.quantity}</div>\r\n                    )}\r\n                  </>\r\n                ) : null}\r\n                {selectedAction === \"buyCoins\" ? (\r\n                  <>\r\n                    <TextField\r\n                      type=\"text\"\r\n                      name=\"startPrice\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      label=\"Purchase price\"\r\n                      value={values.startPrice}\r\n                    />\r\n                    {errors.startPrice && touched.startPrice && (\r\n                      <div className={classes.errorBox}>\r\n                        {errors.startPrice}\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                ) : null}\r\n              </Box>\r\n              <Button\r\n                type=\"submit\"\r\n                disabled={isSubmitting}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submitButton}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  usePortfolioStatus,\r\n  caclPortfolioStatus,\r\n  useCalculatedCoinsData,\r\n  useCoins,\r\n  useCoinsPrice,\r\n} from \"../../features/MainTable/MainTableSlice\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n    },\r\n  },\r\n  card: {\r\n    minHeight: \"327px\",\r\n  },\r\n  cardContent: {\r\n    textAlign: \"center\",\r\n    height: \"100%\",\r\n  },\r\n  portfolioRow: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    marginBottom: \"20px\",\r\n  },\r\n  spinnerBox: {\r\n    height: \"202px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nexport default function AvarageCoinCost() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const coins = useSelector(useCoins);\r\n  const coinsPrice = useSelector(useCoinsPrice);\r\n  const calculatedCoinsData = useSelector(useCalculatedCoinsData);\r\n  const portfolioStatus = useSelector(usePortfolioStatus);\r\n  const [portfolioData, setPortfolioData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(caclPortfolioStatus({ coins, coinsPrice }));\r\n  }, [calculatedCoinsData]);\r\n\r\n  useEffect(() => {\r\n    if (portfolioStatus) {\r\n      setPortfolioData(portfolioStatus);\r\n    }\r\n  }, [portfolioStatus]);\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (portfolioStatus && portfolioStatus.startCost > 0) {\r\n      setIsLoading(false);\r\n    }\r\n  }, [portfolioStatus]);\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardContent className={classes.cardContent}>\r\n        <Box>\r\n          <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\r\n            Portfolio Status\r\n          </Typography>\r\n        </Box>\r\n        <Box\r\n          className={\r\n            !portfolioData || !coins.length > 0 ? classes.spinnerBox : null\r\n          }\r\n        >\r\n          {coins.length > 0 ? (\r\n            isLoading > 0 ? (\r\n              <CircularProgress />\r\n            ) : (\r\n              <Typography component=\"div\">\r\n                <Box className={classes.portfolioRow}>\r\n                  <Typography variant=\"body1\" color=\"textSecondary\">\r\n                    Total Amount Start:\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body1\"\r\n                    color=\"textSecondary\"\r\n                    fontWeight=\"fontWeightBold\"\r\n                  >\r\n                    {portfolioData.startCost.toFixed(2)}$\r\n                  </Typography>\r\n                </Box>\r\n                <Box className={classes.portfolioRow}>\r\n                  <Typography variant=\"body1\" color=\"textSecondary\">\r\n                    Total Amount Current:\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body1\"\r\n                    color=\"textSecondary\"\r\n                    fontWeight=\"fontWeightBold\"\r\n                  >\r\n                    {portfolioData.currentCost.toFixed(2)}$\r\n                  </Typography>\r\n                </Box>\r\n                <Box className={classes.portfolioRow}>\r\n                  <Typography variant=\"body1\" color=\"textSecondary\">\r\n                    Total profit $:\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body1\"\r\n                    color=\"textSecondary\"\r\n                    fontWeight=\"fontWeightBold\"\r\n                  >\r\n                    {portfolioData.profitDollar.toFixed(2)}$\r\n                  </Typography>\r\n                </Box>\r\n                <Box className={classes.portfolioRow}>\r\n                  <Typography variant=\"body1\" color=\"textSecondary\">\r\n                    Total profit %:\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body1\"\r\n                    color=\"textSecondary\"\r\n                    fontWeight={800}\r\n                    m={1}\r\n                  >\r\n                    {(portfolioData.profitPercent * 100).toFixed(2)}%\r\n                  </Typography>\r\n                </Box>\r\n              </Typography>\r\n            )\r\n          ) : (\r\n            <h3>Please add some coins to start using your wallet</h3>\r\n          )}\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  downloadData,\r\n  uploadData,\r\n  loadDemoData,\r\n  clearAllData,\r\n} from \"../../features/MainTable/MainTableSlice\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n    },\r\n  },\r\n  card: {\r\n    minHeight: \"327px\",\r\n  },\r\n  cardContent: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    minHeight: \"287px\",\r\n    justifyContent: \"space-between\",\r\n    textAlign: \"center\",\r\n  },\r\n  button: {\r\n    display: \"block\",\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nexport default function Settings() {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    function onChange(event) {\r\n      const reader = new FileReader();\r\n      reader.onload = onReaderLoad;\r\n      reader.readAsText(event.target.files[0]);\r\n    }\r\n    function onReaderLoad(event) {\r\n      const obj = JSON.parse(event.target.result);\r\n      const toDispatch = JSON.parse(obj);\r\n      dispatch(uploadData(toDispatch));\r\n      localStorage.setItem(\"userCoins\", obj);\r\n    }\r\n    document.getElementById(\"file\").addEventListener(\"change\", onChange);\r\n    return () => {\r\n      document.getElementById(\"file\").removeEventListener(\"change\", onChange);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardContent className={classes.cardContent}>\r\n        <Typography variant=\"h6\" color=\"textSecondary\">\r\n          Data settings\r\n        </Typography>\r\n        <Button\r\n          id=\"downloadAnchorElem\"\r\n          onClick={() => {\r\n            dispatch(downloadData());\r\n          }}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.button}\r\n        >\r\n          Download your data\r\n        </Button>\r\n\r\n        <Button\r\n          component=\"label\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.button}\r\n        >\r\n          Upload your data\r\n          <input type=\"file\" id=\"file\" accept=\".json\" hidden />\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            dispatch(loadDemoData());\r\n          }}\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          className={classes.button}\r\n        >\r\n          Load demo data\r\n        </Button>\r\n        <Button\r\n          id=\"clearStorage\"\r\n          onClick={() => {\r\n            dispatch(clearAllData());\r\n          }}\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          className={classes.button}\r\n        >\r\n          Clear all data\r\n        </Button>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport TradingViewWidget from \"react-tradingview-widget\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useCoins } from \"../../features/MainTable/MainTableSlice\";\r\n\r\nexport default function TradingWidgets() {\r\n  const coins = useSelector(useCoins);\r\n\r\n  const widgets = coins.map((coin) => {\r\n    return (\r\n      <Card style={{ marginBottom: \"20px\" }}>\r\n        <CardContent>\r\n          <TradingViewWidget\r\n            symbol={`BINANCE:${coin.coinName}BUSD`}\r\n            width={\"100%\"}\r\n          />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  });\r\n  return widgets;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  getCoinsPrice,\n  useCoins,\n  useCoinsPrice,\n  useCalculatedCoinsData,\n  caclCoinsData,\n} from \"./MainTableSlice\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useMediaQuery, useTheme } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    \"& > *\": {\n      borderRadius: \"5px\",\n    },\n    \"& .ag-root-wrapper-body\": {\n      height: \"100%\",\n    },\n    \"& .ag-header-cell-label\": {\n      justifyContent: \"center\",\n    },\n    \"& .ag-center-cols-viewport\": {\n      overflowX: \"hidden !important\",\n    },\n  },\n}));\n\nexport default function MainTable() {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const coins = useSelector(useCoins);\n  const coinsPrice = useSelector(useCoinsPrice);\n  const calculatedCoinsData = useSelector(useCalculatedCoinsData);\n\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const [rowData, setRowData] = useState([]);\n\n  const columnDefsDesktop = [\n    {\n      headerName: \"№\",\n      field: \"number\",\n      width: 50,\n    },\n    {\n      headerName: \"Coin Name\",\n      field: \"coinName\",\n    },\n    {\n      headerName: \"Quantity\",\n      field: \"quantity\",\n    },\n    {\n      headerName: \"Start Cost\",\n      field: \"startCost\",\n    },\n    {\n      headerName: \"Start/Avarage Price\",\n      field: \"startPrice\",\n    },\n    {\n      headerName: \"Current Price\",\n      field: \"currentPrice\",\n    },\n    {\n      headerName: \"Current Cost\",\n      field: \"currentCost\",\n    },\n    {\n      headerName: \"Profit $\",\n      field: \"profitDollar\",\n    },\n    {\n      headerName: \"Profit %\",\n      field: \"profitPercent\",\n    },\n  ];\n  const columnDefsMobile = [\n    {\n      headerName: \"Coin Name\",\n      field: \"coinName\",\n    },\n    {\n      headerName: \"Current Cost\",\n      field: \"currentCost\",\n    },\n    {\n      headerName: \"Profit $\",\n      field: \"profitDollar\",\n    },\n    {\n      headerName: \"Profit %\",\n      field: \"profitPercent\",\n    },\n  ];\n  const [columnDefs, setColumnDefs] = useState(columnDefsMobile);\n  useEffect(() => {\n    if (isMobile) {\n      setColumnDefs(columnDefsMobile);\n    } else {\n      setColumnDefs(columnDefsDesktop);\n    }\n  }, [isMobile]);\n\n  useEffect(() => {\n    if (gridApi) {\n      gridApi.refreshCells();\n    }\n  }, [columnDefs]);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      dispatch(getCoinsPrice(coins));\n    }, 3500);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [coins]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (coins && coinsPrice) {\n      if (coins.length === Object.keys(coinsPrice).length) {\n        dispatch(caclCoinsData({ coins, coinsPrice }));\n        setIsLoading(false);\n      }\n    }\n  }, [coins, coinsPrice]);\n\n  useEffect(() => {\n    if (calculatedCoinsData) {\n      setRowData(calculatedCoinsData);\n    }\n  }, [calculatedCoinsData]);\n\n  const onGridReady = (params) => {\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n  };\n\n  useEffect(() => {\n    if (gridApi) {\n      gridApi.sizeColumnsToFit();\n    }\n  });\n\n  useEffect(() => {\n    if (rowData && rowData.length > 0) {\n      setIsLoading(false);\n    }\n  }, [rowData]);\n\n  return (\n    <Card>\n      <CardContent style={{ textAlign: \"center\" }}>\n        {coins.length > 0 ? (\n          isLoading ? (\n            <CircularProgress style={{ margin: \"20px 0\" }} />\n          ) : (\n            <div className=\"ag-theme-balham\" style={{ width: \"100%\" }}>\n              <AgGridReact\n                rowData={rowData}\n                columnDefs={columnDefs}\n                onGridReady={onGridReady}\n                className={classes.root}\n              />\n            </div>\n          )\n        ) : (\n          <h1>Please add some coins to start using your wallet</h1>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport AddCoin from \"./components/AddCoin/AddCoin\";\nimport CoinActions from \"./components/CoinActions/CoinActions\";\nimport PortfolioStatus from \"./components/PortfolioStatus/PortfolioStatus\";\nimport Settings from \"./components/Settings/Settings\";\nimport TradingWidgets from \"./components/TradingWidgets/TradingWidgets\";\nimport MainTable from \"./features/MainTable/MainTable\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Container>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={3}>\n            <PortfolioStatus />\n          </Grid>\n          <Grid item xs={12} lg={3}>\n            <AddCoin />\n          </Grid>\n          <Grid item xs={12} lg={3}>\n            <CoinActions />\n          </Grid>\n          <Grid item xs={12} lg={3}>\n            <Settings />\n          </Grid>\n          <Grid item xs={12}>\n            <MainTable />\n          </Grid>\n          <Grid item xs={12}>\n            <TradingWidgets />\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport mainTableReducer from \"../features/MainTable/MainTableSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    mainTable: mainTableReducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}